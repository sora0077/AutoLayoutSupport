//
//  AutoLayoutSupport.generated.swift
//  AutoLayoutSupport
//
//  Created by 林達也 on 2018/02/15.
//  Copyright © 2018年 林達也. All rights reserved.
//

import UIKit

{% macro ownerImpl type %}{% if type.name == "UIView" %}base{% else %}base.owningView{% endif %}{% endmacro %}
{% for type in types.implementing.AutoLayoutSupportCompatible %}
extension Extension where Base: {{ type.name }} {
    public var top: Layout<NSLayoutYAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.topAnchor)
    }
    
    public var bottom: Layout<NSLayoutYAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.bottomAnchor)
    }
    
    public var left: Layout<NSLayoutXAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.leftAnchor)
    }
    
    public var right: Layout<NSLayoutXAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.rightAnchor)
    }
    
    public var leading: Layout<NSLayoutXAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.leadingAnchor)
    }
    
    public var trailing: Layout<NSLayoutXAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.trailingAnchor)
    }
    
    public var centerX: Layout<NSLayoutXAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.centerXAnchor)
    }
    
    public var centerY: Layout<NSLayoutYAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.centerYAnchor)
    }
    {% if type == "UIView" %}
    public var firstBaseline: Layout<NSLayoutYAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.firstBaselineAnchor)
    }
    
    public var lastBaseline: Layout<NSLayoutYAxisAnchor> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.lastBaselineAnchor)
    }
    {% endif %}
    public var width: Layout<NSLayoutDimension> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.widthAnchor)
    }
    
    public var height: Layout<NSLayoutDimension> {
        return Layout(owner: {% call ownerImpl type %}, anchors: base.heightAnchor)
    }
    
    // MARK: - composition layout
    public var center: Layout<(x: NSLayoutXAxisAnchor, y: NSLayoutYAxisAnchor)> {
        return Layout(owner: {% call ownerImpl type %}, anchors: (base.centerXAnchor, base.centerYAnchor))
    }
    
    public var size: Layout<(width: NSLayoutDimension, height: NSLayoutDimension)> {
        return Layout(owner: {% call ownerImpl type %}, anchors: (base.widthAnchor, base.heightAnchor))
    }
    
    public var edges: Layout<(top: NSLayoutYAxisAnchor, left: NSLayoutXAxisAnchor, bottom: NSLayoutYAxisAnchor, right: NSLayoutXAxisAnchor)> {
        return Layout(owner: {% call ownerImpl type %}, anchors: (base.topAnchor, base.leftAnchor, base.bottomAnchor, base.rightAnchor))
    }
}
{% endfor %}

extension Extension where Base: UILayoutSupport {
    public var top: Layout<NSLayoutYAxisAnchor> {
        return Layout(owner: nil, anchors: base.topAnchor)
    }
    
    public var bottom: Layout<NSLayoutYAxisAnchor> {
        return Layout(owner: nil, anchors: base.bottomAnchor)
    }
    
    public var height: Layout<NSLayoutDimension> {
        return Layout(owner: nil, anchors: base.heightAnchor)
    }
}
