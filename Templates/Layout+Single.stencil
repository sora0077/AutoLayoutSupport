//
//  Layout+Single.swift
//  AutoLayoutSupport
//
//  Created by 林達也 on 2018/02/18.
//  Copyright © 2018年 林達也. All rights reserved.
//

import Foundation

{% for uikit_anchor in argument.uikit_anchors %}
{% for type in types.implementing.AutoLayoutSupportCompatible %}
//
//
//
// MARK: - {{ uikit_anchor }} specialized with {{ type.name }}
public extension Layout where Anchors == {{ uikit_anchor }} {
    @discardableResult
    func equal(to other: {{ type.name }}, constant: CGFloat = 0, priority: UILayoutPriority = .required,
               file: StaticString = #file, line: UInt = #line) -> NSLayoutConstraint {
        guard let other = keyPaths.lazy.flatMap({ other.autolayout[keyPath: $0] as? Layout<Anchors> }).first else {
            fatalError()
        }
        return equal(to: other, constant: constant, priority: priority, file: file, line: line)
    }

    @discardableResult
    func greaterThanOrEqual(to other: {{ type.name }}, constant: CGFloat = 0, priority: UILayoutPriority = .required,
                            file: StaticString = #file, line: UInt = #line) -> NSLayoutConstraint {
        guard let other = keyPaths.lazy.flatMap({ other.autolayout[keyPath: $0] as? Layout<Anchors> }).first else {
            fatalError()
        }
        return greaterThanOrEqual(to: other, constant: constant, priority: priority, file: file, line: line)
    }

    @discardableResult
    func lessThanOrEqual(to other: {{ type.name }}, constant: CGFloat = 0, priority: UILayoutPriority = .required,
                         file: StaticString = #file, line: UInt = #line) -> NSLayoutConstraint {
        guard let other = keyPaths.lazy.flatMap({ other.autolayout[keyPath: $0] as? Layout<Anchors> }).first else {
            fatalError()
        }
        return lessThanOrEqual(to: other, constant: constant, priority: priority, file: file, line: line)
    }
}

{% endfor %}
{% endfor %}


{% for uikit_anchor in argument.uikit_anchors %}
//
//
//
// MARK: - {{ uikit_anchor }} specialized with UILayoutSupport
public extension Layout where Anchors == {{ uikit_anchor }} {
    @discardableResult
    func equal(to other: UILayoutSupport, constant: CGFloat = 0, priority: UILayoutPriority = .required,
               file: StaticString = #file, line: UInt = #line) -> NSLayoutConstraint {
        guard let other = keyPaths.lazy.flatMap({ other.autolayout[keyPath: $0] as? Layout<Anchors> }).first else {
            fatalError()
        }
        return equal(to: other, constant: constant, priority: priority, file: file, line: line)
    }

    @discardableResult
    func greaterThanOrEqual(to other: UILayoutSupport, constant: CGFloat = 0, priority: UILayoutPriority = .required,
                            file: StaticString = #file, line: UInt = #line) -> NSLayoutConstraint {
        guard let other = keyPaths.lazy.flatMap({ other.autolayout[keyPath: $0] as? Layout<Anchors> }).first else {
            fatalError()
        }
        return greaterThanOrEqual(to: other, constant: constant, priority: priority, file: file, line: line)
    }

    @discardableResult
    func lessThanOrEqual(to other: UILayoutSupport, constant: CGFloat = 0, priority: UILayoutPriority = .required,
                         file: StaticString = #file, line: UInt = #line) -> NSLayoutConstraint {
        guard let other = keyPaths.lazy.flatMap({ other.autolayout[keyPath: $0] as? Layout<Anchors> }).first else {
            fatalError()
        }
        return lessThanOrEqual(to: other, constant: constant, priority: priority, file: file, line: line)
    }
}
{% endfor %}
